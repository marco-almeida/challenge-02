// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (
    weight,
    destination,
    observations,
    finished
) VALUES (
    $1, $2, $3, $4
) RETURNING id, weight, destination, observations, finished
`

type CreateOrderParams struct {
	Weight       float32      `json:"weight"`
	Destination  pgtype.Point `json:"destination"`
	Observations string       `json:"observations"`
	Finished     bool         `json:"finished"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Weight,
		arg.Destination,
		arg.Observations,
		arg.Finished,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Destination,
		&i.Observations,
		&i.Finished,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "order"
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, weight, destination, observations, finished
FROM "order"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Destination,
		&i.Observations,
		&i.Finished,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, weight, destination, observations, finished FROM "order"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Weight,
			&i.Destination,
			&i.Observations,
			&i.Finished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderFinished = `-- name: UpdateOrderFinished :one
UPDATE "order"
SET finished = $2
WHERE id = $1
RETURNING id, weight, destination, observations, finished
`

type UpdateOrderFinishedParams struct {
	ID       int64 `json:"id"`
	Finished bool  `json:"finished"`
}

func (q *Queries) UpdateOrderFinished(ctx context.Context, arg UpdateOrderFinishedParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderFinished, arg.ID, arg.Finished)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Destination,
		&i.Observations,
		&i.Finished,
	)
	return i, err
}

const updateOrderObservations = `-- name: UpdateOrderObservations :one
UPDATE "order"
SET observations = $2
WHERE id = $1
RETURNING id, weight, destination, observations, finished
`

type UpdateOrderObservationsParams struct {
	ID           int64  `json:"id"`
	Observations string `json:"observations"`
}

func (q *Queries) UpdateOrderObservations(ctx context.Context, arg UpdateOrderObservationsParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderObservations, arg.ID, arg.Observations)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Destination,
		&i.Observations,
		&i.Finished,
	)
	return i, err
}
