// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: vehicle.sql

package db

import (
	"context"
)

const createVehicle = `-- name: CreateVehicle :one
INSERT INTO "vehicle" (
    max_weight_capacity,
    number_plate
) VALUES (
    $1, $2
) RETURNING id, max_weight_capacity, number_plate
`

type CreateVehicleParams struct {
	MaxWeightCapacity float32 `json:"max_weight_capacity"`
	NumberPlate       string  `json:"number_plate"`
}

func (q *Queries) CreateVehicle(ctx context.Context, arg CreateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRow(ctx, createVehicle, arg.MaxWeightCapacity, arg.NumberPlate)
	var i Vehicle
	err := row.Scan(&i.ID, &i.MaxWeightCapacity, &i.NumberPlate)
	return i, err
}

const deleteVehicle = `-- name: DeleteVehicle :exec
DELETE FROM "vehicle"
WHERE id = $1
`

func (q *Queries) DeleteVehicle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVehicle, id)
	return err
}

const getVehicle = `-- name: GetVehicle :one
SELECT id, max_weight_capacity, number_plate
FROM "vehicle"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVehicle(ctx context.Context, id int64) (Vehicle, error) {
	row := q.db.QueryRow(ctx, getVehicle, id)
	var i Vehicle
	err := row.Scan(&i.ID, &i.MaxWeightCapacity, &i.NumberPlate)
	return i, err
}

const getVehicles = `-- name: GetVehicles :many
SELECT id, max_weight_capacity, number_plate
FROM "vehicle"
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetVehiclesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetVehicles(ctx context.Context, arg GetVehiclesParams) ([]Vehicle, error) {
	rows, err := q.db.Query(ctx, getVehicles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vehicle{}
	for rows.Next() {
		var i Vehicle
		if err := rows.Scan(&i.ID, &i.MaxWeightCapacity, &i.NumberPlate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
